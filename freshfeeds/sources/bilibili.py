from typing import List, Dict, Tuple\nfrom dateutil import parser as dtp\nfrom ..utils import make_session, get_json\nimport yaml\n\nTIMELINE_API = "https://api.bilibili.com/pgc/web/timeline/v2?season_type=1&day_before=2&day_after=4"\nRANK_API_V2 = "https://api.bilibili.com/x/web-interface/ranking/v2?rid={rid}&type=all"\nFALLBACK_TIMELINE_API = "https://bangumi.bilibili.com/web_api/timeline_global"\n\ndef load_common():\n    with open("config.yaml", "r", encoding="utf-8") as f:\n        cfg = yaml.safe_load(f) or {}\n    ua = cfg.get("user_agent") or "freshfeeds/1.0"\n    delay = float(cfg.get("request_delay_seconds") or 0.8)\n    rank_default = (cfg.get("bilibili_rank_default_category") or "bangumi").lower()\n    return ua, delay, rank_default\n\ndef fetch_bili_timeline(limit: int = 30) -> List[Dict]:\n    ua, delay, _ = load_common()\n    s = make_session(ua)\n    items: List[Dict] = []\n    try:\n        data = get_json(s, TIMELINE_API, delay=delay)\n        result = data.get("result") or data.get("data") or {}\n        for day in result.get("timeline", []):\n            for ep in day.get("episodes", []):\n                title = f"{ep.get('pub_index','')} {ep.get('title','')}".strip()\n                ts = ep.get("pub_ts") or ep.get("pub_time") or ""\n                pub = str(ts)\n                try:\n                    if ts: pub = dtp.parse(str(ts)).strftime("%Y-%m-%d %H:%M")\n                except Exception: pass\n                season_id = ep.get("season_id") or ep.get("season_id_str") or ""\n                ep_id = ep.get("ep_id") or ep.get("episode_id") or ""\n                link = f"https://www.bilibili.com/bangumi/play/ss{season_id}" if season_id else \
                       (f"https://www.bilibili.com/bangumi/play/ep{ep_id}" if ep_id else "")\n                items.append({\n                    "title": title or ep.get("long_title") or ep.get("share_copy") or "",\n                    "link": link,\n                    "published": pub,\n                    "summary": ep.get("share_copy") or ep.get("subtitle") or "",\n                    "source": "Bilibili PGC Timeline"\n                })\n                if len(items) >= limit: return items\n    except Exception:\n        pass\n    try:\n        data = get_json(s, FALLBACK_TIMELINE_API, delay=delay)\n        for day in data.get("result", []):\n            for ep in day.get("seasons", []):\n                items.append({\n                    "title": ep.get("title") or ep.get("pub_index") or "",\n                    "link": ep.get("url") or "",\n                    "published": str(ep.get("pub_date") or ep.get("pub_time") or ""),\n                    "summary": ep.get("pub_time") or "",\n                    "source": "Bilibili Timeline (legacy)"\n                })\n                if len(items) >= limit: return items\n    except Exception:\n        pass\n    return items[:limit]\n\ndef _rid_for_category(category: str) -> Tuple[int, str]:\n    c = (category or "bangumi").lower()\n    if c in ("anime","animation","donghua","动画","dongman"):\n        return 1, "anime"\n    return 13, "bangumi"\n\ndef fetch_bili_rank(category: str = "bangumi", limit: int = 20) -> List[Dict]:\n    ua, delay, _ = load_common()\n    s = make_session(ua)\n    rid, cname = _rid_for_category(category)\n    url = RANK_API_V2.format(rid=rid)\n    items: List[Dict] = []\n    try:\n        data = get_json(s, url, delay=delay)\n        lst = (data.get("data") or {}).get("list") or []\n        for it in lst[:limit]:\n            stat = it.get("stat") or {}\n            owner = it.get("owner") or {}\n            title = it.get("title") or it.get("name") or it.get("short_title") or ""\n            bvid = it.get("bvid") or ""\n            season_id = it.get("season_id") or it.get("season_id_str") or ""\n            link = f"https://www.bilibili.com/video/{bvid}" if bvid else \
                   (f"https://www.bilibili.com/bangumi/play/ss{season_id}" if season_id else "")\n            items.append({\n                "title": title,\n                "link": link,\n                "published": str(it.get("pubdate") or it.get("ctime") or it.get("publish_time") or ""),\n                "summary": it.get("desc") or it.get("evaluate") or "",\n                "view": stat.get("view") or it.get("play") or None,\n                "like": stat.get("like") or None,\n                "author": owner.get("name") or it.get("subtitle") or "",\n                "source": f"Bilibili Ranking ({cname})"\n            })\n    except Exception:\n        pass\n    return items[:limit]\n