import argparse, yaml\nfrom . import __app_name__, __version__\nfrom .output import save_json, save_csv, save_markdown\nfrom .sources.bilibili import fetch_bili_timeline, fetch_bili_rank\nfrom .sources.steam_news import fetch_steam_news\n\ndef main():\n    parser = argparse.ArgumentParser(prog=__app_name__, description="Bilibili anime + Steam news (compliant sources).")\n    parser.add_argument("--version", action="version", version=f"%(prog)s {__version__}")\n    sub = parser.add_subparsers(dest="cmd", required=True)\n\n    p_b = sub.add_parser("bili", help="Bilibili anime sources")\n    sb = p_b.add_subparsers(dest="bili_cmd", required=True)\n\n    p_b_t = sb.add_parser("timeline", help="PGC timeline")\n    p_b_t.add_argument("--limit", type=int, default=30)\n    p_b_t.add_argument("--format", choices=["json","csv","md","all"], default="all")\n    p_b_t.add_argument("--outdir", default="output")\n\n    p_b_r = sb.add_parser("rank", help="Ranking (anime/bangumi)")\n    p_b_r.add_argument("--category", choices=["anime","bangumi"], default=None)\n    p_b_r.add_argument("--limit", type=int, default=20)\n    p_b_r.add_argument("--format", choices=["json","csv","md","all"], default="all")\n    p_b_r.add_argument("--outdir", default="output")\n\n    p_s = sub.add_parser("steam", help="Steam News API")\n    p_s.add_argument("--limit", type=int, default=5)\n    p_s.add_argument("--format", choices=["json","csv","md","all"], default="all")\n    p_s.add_argument("--outdir", default="output")\n\n    args = parser.parse_args()\n\n    if args.cmd == "bili" and args.bili_cmd == "timeline":\n        items = fetch_bili_timeline(limit=args.limit)\n        _export(items, args.format, args.outdir, "bili_timeline", "B站番剧时间表（PGC）")\n    elif args.cmd == "bili" and args.bili_cmd == "rank":\n        category = args.category\n        if category is None:\n            with open("config.yaml", "r", encoding="utf-8") as f:\n                cfg = yaml.safe_load(f) or {}\n            category = cfg.get("bilibili_rank_default_category","bangumi")\n        items = fetch_bili_rank(category=category, limit=args.limit)\n        _export(items, args.format, args.outdir, f"bili_rank_{category}", f"B站排行榜（{category}）")\n    elif args.cmd == "steam":\n        with open("config.yaml", "r", encoding="utf-8") as f:\n            cfg = yaml.safe_load(f) or {}\n        appids = cfg.get("steam_appids") or []\n        items = fetch_steam_news(appids=appids, limit_per_app=args.limit)\n        _export(items, args.format, args.outdir, "steam_news", "Steam 最新公告/更新")\n\ndef _export(items, fmt, outdir, name, title):\n    paths = []\n    if fmt in ("json","all"): paths.append(save_json(items, outdir, name))\n    if fmt in ("csv","all"): paths.append(save_csv(items, outdir, name))\n    if fmt in ("md","all"): paths.append(save_markdown(items, outdir, name, title))\n    for p in paths: print(p)\n